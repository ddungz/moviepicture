name: MP Frontend Continuous Integration

on:
  # Allows run on-demand
  workflow_dispatch:
    # Runs on `pull_requests` against the `main` branch
    pull_request:
      branches:
        - main
      paths:
        # only when code in the frontend application changes
        - "frontend/**"
env:
  NODE_VERSION: 18.x

jobs:
  # Runs the following jobs: `lint`, `test`
  lint:
    name: MP Frontend Lint run
    runs-on:  ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
      
      - name: Nodejs dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-
      
      - name: Dependencies installation
        run: |
          npm install
      
      - name: ESLint run
        run: |
          npm run lint -- --fix

  test:
    name: MP Frontend Tests run
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
    
      - name: Dependencies installation
        run: |
          npm install -f
    
    - name: Tests run
      run: |
        npm run test

  build:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Code checkout
        uses: action/checkout@v3
      
      - name: Dependencies installation
        run: |
          npm install
      
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
      
      - name: Build docker image
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          export EXTERNAL_IP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNAL_IP
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_FRONTEND_REPOSITORY_NAME }}:latest --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNAL_IP .
          docker images
